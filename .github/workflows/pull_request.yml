name: Pull Request Tests
on:
  pull_request:
    branches: [develop]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      # Get time of the action trigger
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current_time
        with:
          format: YYYYMMDD-HH
          utcOffset: '+01:00'
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      # Get commit message
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "::set-output name=HEAD_COMMIT_MESSAGE::$(git show -s --format=%s)"
      # Setup node
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      # Install dependencies
      - name: Install dependencies
        id: install_modules
        run: yarn

      # Create a temporary build
      - name: Temporary build
        id: build
        run: yarn build

      # Upload the temporary build as artifact
      - uses: actions/upload-artifact@v3
        id: upload_build
        if: success()
        with:
          name: build
          path: build/
          retention-days: 30

      # Setup Playwright
      - name: Install Playwright Browsers
        id: setup_tests
        run: yarn setup-test

      # Run the dev server & tests
      - name: Start server and run Playwright tests
        id: run_server_and_tests
        run: |
          yarn start:ci &
          sleep 30 &&
          curl -k https://localhost:3000 &&
          TEST_USER=${{ secrets.TEST_USER }} TEST_USER_PASS=${{ secrets.TEST_USER_PASS }} yarn test:ci

      # Run the dev server & http tests
      - name: Start HTTP server and run Playwright tests
        id: run_server_and_http_tests
        run: |
          yarn start:http &
          sleep 30 &&
          curl -k http://localhost:3001 &&
          yarn test:http

      # If the tests failed, upload the screenshots as artifacts
      - uses: actions/upload-artifact@v3
        id: upload_artifacts
        if: failure()
        with:
          name: failed-screenshots
          path: test-results/
          retention-days: 30

      # If the tests failed, upload the screenshots as artifacts
      - uses: actions/upload-artifact@v3
        id: upload_artifacts_http
        if: failure()
        with:
          name: failed-screenshots-http
          path: test-results-http/
          retention-days: 30

      # Copy the screenshots to HQ
      - name: Copy screenshots to HQ
        id: copy_screenshots
        uses: garygrossgarten/github-action-scp@release
        if: failure()
        with:
          local: test-results
          remote: ${{ secrets.TEST_REPORT_PATH }}
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          privateKey: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          rmRemote: true
      # Copy the screenshots to HQ
      - name: Copy HTTP screenshots to HQ
        id: copy_screenshots_http
        uses: garygrossgarten/github-action-scp@release
        if: failure()
        with:
          local: test-results-http
          remote: ${{ secrets.TEST_REPORT_PATH }}-http
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          privateKey: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          rmRemote: true
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
          DISCORD_EMBEDS: '[{"author": {"icon_url": "https://avatars.githubusercontent.com/${{ github.actor }}", "name": "${{ github.actor }}", "url": "https://github.com/${{github.actor}}"}, "url": "https://github.com/${{github.repository}}/commit/${{github.sha}}", "fields": [{ "name": "Commit Message", "value": "${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}"},{"name": "Repository","value": "[${{github.event.repository.name}}](${{github.event.repository.clone_url}})","inline": true},{"name": "Branch","value": "[${{github.ref_name}}](https://github.com/${{github.repository}}/pull/${{github.ref_name}})","inline": true},{ "name": "Event", "value": "${{github.event_name}}", "inline": true },{"name": "Author","value": "[${{github.actor}}](https://github.com/${{github.actor}})","inline": true},{ "name": "Job", "value": "${{github.job}}", "inline": true },{"name": "","value": "ü§ñ [Github Action](https://github.com/${{ github.repository}}/actions/runs/${{ github.run_id}}) üåê [View Site]( https://deploy-preview-${{ github.event.pull_request.number}}--unrivaled-kitsune-6f1aa0.netlify.app ) "}],"color": 65280,"footer": { "text": "Published at ${{steps.current_time.outputs.readableTime}}" }}]'
          DISCORD_AVATAR: 'https://github.com/qoretechnologies/qorus-ui/blob/fe66760cd405cb3d958778a45c0d865f8b503b12/public/q-symbol-small.png?raw=true'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ':white_check_mark: Tests action run #${{ github.run_number }} for [PR](${{ github.event.pull_request.html_url }}) triggered by ${{ github.triggering_actor }} success'
        if: success()
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}}
          DISCORD_EMBEDS: '[{"author": {"icon_url": "https://avatars.githubusercontent.com/${{ github.actor }}", "name": "${{ github.actor }}", "url": "https://github.com/${{github.actor}}"}, "url": "https://github.com/${{github.repository}}/commit/${{github.sha}}", "fields": [{ "name": "Commit Message", "value": "${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MESSAGE }}"},{"name": "Repository","value": "[${{github.event.repository.name}}](${{github.event.repository.clone_url}})","inline": true},{"name": "Branch","value": "[${{github.ref_name}}](https://github.com/${{github.repository}}/pull/${{github.ref_name}})","inline": true},{ "name": "Event", "value": "${{github.event_name}}", "inline": true },{"name": "Author","value": "[${{github.actor}}](https://github.com/${{github.actor}})","inline": true},{ "name": "Job", "value": "${{github.job}}", "inline": true },{"name": "","value": "ü§ñ [Github Action](https://github.com/${{ github.repository}}/actions/runs/${{ github.run_id}}) üåê [View Site](https://deploy-preview-${{ github.event.pull_request.number}}--unrivaled-kitsune-6f1aa0.netlify.app) :warning: [View report](https://hq.qoretechnologies.com/~pchalupny/storage/report/index.html) :camera: [View screenshots](https://hq.qoretechnologies.com/~pchalupny/storage/)"}],"color": 16711680,"footer": { "text": "Triggered at ${{steps.current_time.outputs.readableTime}}" }}]'
          DISCORD_AVATAR: 'https://github.com/qoretechnologies/qorus-ui/blob/fe66760cd405cb3d958778a45c0d865f8b503b12/public/q-symbol-small.png?raw=true'
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: ':exclamation: Tests action run #${{ github.run_number }} for [PR](${{ github.event.pull_request.html_url }}) triggered by ${{ github.triggering_actor }} failed!'
        if: failure()
