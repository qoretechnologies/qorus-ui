{"workflowid": 278,"name": "ARRAYTEST","version": "2.9","patch": "p1","description": "workflow testing many step types","author": "Qore Technologies, sro","autostart": 3,"manual_autostart": true,"errorfunction_instanceid": 19,"attach_func_instanceid": 22,"detach_func_instanceid": 3,"onetimeinit_func_instanceid": 21,"created": "2099-01-13 11:04:47.876104 +01:00","modified": "2015-01-13 11:04:47.876104 +01:00","enabled": true,"deprecated": false,"keylist": null,"stepmap": {"1": "test_function_1","2": "array_test_f1","3": "array_test_async","4": "test_function_2","5": "array_subworkflow","6": "test_step_2","7": "test_function_3","8": "test_subworkflow","9": "test_step_3"},"steps": {"1": [],"2": [1],"3": [1],"4": [3],"5": [1],"6": [2,4,5],"7": [2,4,5],"8": [6,7],"9": [8]},"segment": [{"steplist": [1,2,3,5],"steps": {"1": [],"2": [1],"3": [1],"5": [1]},"prereqfor": [3]},{"steplist": [3,4],"steps": {"3": [],"4": [3]},"start": 3,"prereqfor": [3],"linksegment": 0,"linkstepid": 3},{"steplist": [5],"steps": {"5": []},"start": 5,"subworkflow": true,"prereqfor": [3],"linksegment": 0,"linkstepid": 5},{"steplist": [6,7,8,8],"steps": {"6": [],"7": [],"8": [6,7]},"start": 7,"segdeps": [0,1,2]},{"steplist": [8,9],"steps": {"8": [],"9": [8]},"start": 8,"subworkflow": true,"linksegment": 3,"linkstepid": 8}],"stepseg": {"3": 1,"5": 2,"8": 4},"options": [{"name": "no-async-errors","desc": "no errors in async steps"},{"name": "fast-exec","desc": "skip all async step operations and all subworkflow bind operations"},{"name": "skip-subworkflow","desc": "skip all subworkflow bind operations"},{"name": "skip-async","desc": "skip all async steps"},{"name": "no-init-error","desc": "disable random onetimeinit error generation"},{"name": "no-errors","desc": "disable error generation"},{"name": "verbose","value": 100},{"name": "max-retries","value": 5}],"lib": {"functions": [{"name": "doTest","version": "2.0","id": 20,"function_type": "GENERIC","description": "test function for test workflows","author": "Qore Technologies, sro","body": "sub addValue($d) {\n    my $v = \"value-\" + (rand() % 100);\n    if (inlist($v, $d))\n\treturn sprintf(\"SKIPPED (%n)\", $v);\n    \n    if (!exists $d)\n\t$d = $v;\n    else if (type($d) != Type::List)\n\t$d = ($d, $v);\n    else\n\t$d += $v;\n\n    return $v;\n}\n\nsub test_keys() {\n    #my $k = getOrderKeys();\n\n    for (my int $i = 0; $i < 3; $i++) {\n\tmy $h;\n\tmy string $key = \"key\" + (rand() % 10);\n\tif ($key == \"key0\" && getOption(\"no-errors\"))\n\t    $key = \"key1\";\n\tmy $value;\n\tif (!(rand() % 4)) {\n\t    $value = ();\n\t    for (my $x = 0; $x < 3; $x++)\n\t\t$value += addValue(\\$h.$key);\n\t}\n\telse\n\t    $value = addValue(\\$h.$key);\n\n\tlog(LL_INFO, \"%s=%n\", $key, $value);\n\tsetOrderKeys($h);\n    }\n}\n\nsub doTest() {\n    if (get_option(\"throw-error\"))\n        throw \"RETRY-ERROR\", \"stop\";\n\n    if (getOption(\"fast-exec\"))\n\treturn;\n\n    if (getWorkflowInstanceData(\"mode\") == OMQ::WM_Recovery)\n\tlog(LL_INFO, \"stepInfo=%n\", getStepInfo());\n\n    my $hash{\"key\" + (rand() % 100)} = rand() % 100;\n    updateInstanceData($hash);\n    $hash{\"key\" + (rand() % 100)} = rand() % 100;\n    updateDynamicData($hash);\n    $hash{\"key\" + (rand() % 100)} = rand() % 100;\n    updateInstanceData($hash);\n    $hash{\"key\" + (rand() % 100)} = rand() % 100;\n    updateTempData($hash);\n\n    my $a = rand() % 20;\n\n    if (!getOption(\"no-errors\") && $a == 2) {\n\t# 50% chance of throwing \"TEST-BUSINESS-ERROR\"\n\tserror(!(rand() % 2) ? \"TEST-ERROR\" : \"TEST-BUSINESS-ERROR\");\n    }\n\n    log(LL_INFO, \"name: %y\", getWorkflowInstanceData(\"name\"));\n    log(LL_INFO, \"options: %y (no-errors: %y)\", getOption(), getOption(\"no-errors\"));\n\n    if (getWorkflowInstanceData(\"name\") == \"SIMPLETEST\") {\n        test_keys();\n\tif (!getOption(\"no-errors\") && $a == 3)\n\t    throw \"OH-NO!!!!!!!!\", \"scary error occured\";\n    }\n}\n","created": "2015-01-13 11:04:47.776741 +01:00","modified": "2015-01-13 11:04:47.776741 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "355","host": "panda.local","user": "<shell-unknown>"}],"classes": [],"constants": []},"mappers": null,"vmaps": null,"stepinfo": [{"name": "test_function_1","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 7,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_function_1","functions": [{"type": "primary","name": "test_function_1","version": "1.0","function_instanceid": 7,"function_type": "STEP","description": "test function 1","author": "Qore Technologies, sro","body": "sub test_function_1() {\n    updateDynamicData((\"test1\":now_us()));\n    setCustomStatus(\"A\");    \n    doTest();\n}\n","created": "2015-01-13 11:04:47.721701 +01:00","modified": "2015-01-13 11:04:47.721701 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "95","host": "panda.local","user": "<shell-unknown>"}]},{"name": "array_test_f1","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 5,"validationfunction_instanceid": 18,"arrayfunction_instanceid": 4,"arraytype": "SERIES","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "array_test_f1","vfname": "test_validation","afname": "array_test_array","functions": [{"type": "primary","name": "array_test_f1","version": "1.0","function_instanceid": 5,"function_type": "STEP","description": "array test f1","author": "Qore Technologies, sro","body": "sub array_test_f1($element) {\n    #log(LL_INFO, \"workflow metadata=%n\", getWorkflowMetadata());\n    my $si = getStepInfo();\n    setCustomStatus(\"1\");\n    log(LL_INFO, \"element %d/%d = %n\", $si.index + 1, $si.array_size, $element);\n    doTest();\n}\n","created": "2015-01-13 11:04:47.715163 +01:00","modified": "2015-01-13 11:04:47.715163 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "71","host": "panda.local","user": "<shell-unknown>"},{"type": "validation","name": "test_validation","version": "1.0","function_instanceid": 18,"function_type": "VALIDATION","description": "validation test function","author": "Qore Technologies, sro","body": "sub test_validation($arg) {\n    log(LL_INFO, \"stepInfo=%n\", getStepInfo());\n\n    if (exists $arg)\n\tlog(LL_INFO, \"validation arg=%n\", $arg);\n\n    my $stat;\n\n    if (getStepInfo().name =~ /asyncxxxx/)\n\t$stat = OMQ::StatAsyncWaiting;\n    else {\n\t# 75% chance of setting the step to complete\n\tif (getOption(\"fast-exec\") || getOption(\"no-errors\") || rand() % 4)\n\t    $stat = OMQ::StatComplete;\n\telse {\n\t    my $a = rand() % 10;\n\t    if (!$a)\n\t\t$stat = OMQ::StatError;\n\t    else if ($a < 4)\n\t\t$stat = OMQ::StatAsyncWaiting;\n\t    else if ($a < 8)\n\t\t$stat = OMQ::StatRetry;\n\t    else if ($a == 9) {\n\t\tif (rand() % 2)\n\t\t    serror(\"TEST-VALIDATION-ERROR\");\n\t\telse\n\t\t    throw \"TEST-EXCEPTION\"; \n\t    }\n\t}\n    }\n    #log(LL_INFO, \"returning %N\", $stat);\n    return $stat;\n}\n","created": "2015-01-13 11:04:47.762565 +01:00","modified": "2015-01-13 11:04:47.762565 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "275","host": "panda.local","user": "<shell-unknown>"},{"type": "array","name": "array_test_array","version": "1.0","function_instanceid": 4,"function_type": "ARRAY","description": "array function test","author": "Qore Technologies, sro","body": "sub array_test_array() {\n    if (getOption(\"fast-exec\"))\n\treturn True;\n\n    # 1 out of 10 times throw an error\n    if (!getOption(\"no-errors\")) {\n\tif (!(rand() % 10))\n\t    serror(\"TEST-ERROR\");\n\n\t# another chance: 1/10 return NOTHING\n\tif (!(rand() % 10))\n\t    return;\n    }\n\n    # otherwise get array from stepname\n    my $key = getStepInfo().name;\n    my $array = getDynamicData($key);\n    \n    if (!exists $array) {\n\tmy $r = (rand() % 10);\n\n\tfor (my $i; $i < $r; $i++)\n\t    $array[$i] = ( \"key1\" : rand() % 20,\n\t\t\t   \"key2\" : \"this is key2\",\n\t\t\t   \"index\" : $i );\n\tmy $h.$key = $array;\n\tupdateDynamicData($h);\n    }\n    return $array;\n}\n","created": "2015-01-13 11:04:47.711722 +01:00","modified": "2015-01-13 11:04:47.711722 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "35","host": "panda.local","user": "<shell-unknown>"}]},{"name": "array_test_async","version": "1.0","author": "Qore Technologies, sro","steptype": "ASYNC","stepfunction_instanceid": 11,"validationfunction_instanceid": 17,"endfunction_instanceid": 26,"arrayfunction_instanceid": 4,"arraytype": "SERIES","queueid": 1,"created": "2015-01-13 11:04:47.876104 +01:00","sfname": "array_test_async","vfname": "async_validation","efname": "async_test_f1_end","afname": "array_test_array","functions": [{"type": "primary","name": "array_test_async","version": "1.0","function_instanceid": 11,"function_type": "ASYNC-START","description": "async test function","author": "Qore Technologies, sro","body": "sub array_test_async($element) {\n    log(LL_INFO, \"element = %n\", $element);\n\n    setCustomStatus(\"Q\");\n\n    # 10% chance of an error\n    if (getOption(\"fast-exec\") || getOption(\"skip-async\") || !(rand() % 10))\n\tskipAsyncStep();\n    else if (!getOption(\"no-errors\") && !getOption(\"no-async-errors\") && !(rand() % 10))\n\tserror(\"ASYNC-ERROR\");\n    else {\n\tmy $key = sprintf(\"async-test-key-%s-%d\", \n\t\t\t  format_date(\"YYYY-MM-DD-HH:mm:SS\", now()), \n\t\t\t  (rand() % 10000));\n\t#log(LL_INFO, \"sending key: %s\", $key);\n\tsubmitAsyncKey($key);\n    }\n}\n","created": "2015-01-13 11:04:47.735117 +01:00","modified": "2015-01-13 11:04:47.735117 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "137","host": "panda.local","user": "<shell-unknown>"},{"type": "validation","name": "async_validation","version": "1.0","function_instanceid": 17,"function_type": "VALIDATION","description": "asynchronous validation test function","author": "Qore Technologies, sro","body": "sub async_validation($arg) {\n    my $stat;\n    log(LL_INFO, \"key=%n\", $arg);\n    if (exists $arg)\n\t$stat = OMQ::StatComplete;\n    else\n\t$stat = OMQ::StatRetry;\n    log(LL_INFO, \"returning status: %n\", $stat);\n    return $stat;\n}\n","created": "2015-01-13 11:04:47.757627 +01:00","modified": "2015-01-13 11:04:47.757627 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "259","host": "panda.local","user": "<shell-unknown>"},{"type": "array","name": "array_test_array","version": "1.0","function_instanceid": 4,"function_type": "ARRAY","description": "array function test","author": "Qore Technologies, sro","body": "sub array_test_array() {\n    if (getOption(\"fast-exec\"))\n\treturn True;\n\n    # 1 out of 10 times throw an error\n    if (!getOption(\"no-errors\")) {\n\tif (!(rand() % 10))\n\t    serror(\"TEST-ERROR\");\n\n\t# another chance: 1/10 return NOTHING\n\tif (!(rand() % 10))\n\t    return;\n    }\n\n    # otherwise get array from stepname\n    my $key = getStepInfo().name;\n    my $array = getDynamicData($key);\n    \n    if (!exists $array) {\n\tmy $r = (rand() % 10);\n\n\tfor (my $i; $i < $r; $i++)\n\t    $array[$i] = ( \"key1\" : rand() % 20,\n\t\t\t   \"key2\" : \"this is key2\",\n\t\t\t   \"index\" : $i );\n\tmy $h.$key = $array;\n\tupdateDynamicData($h);\n    }\n    return $array;\n}\n","created": "2015-01-13 11:04:47.711722 +01:00","modified": "2015-01-13 11:04:47.711722 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "35","host": "panda.local","user": "<shell-unknown>"},{"type": "async-end","name": "async_test_f1_end","version": "1.0","function_instanceid": 26,"function_type": "ASYNC-END","description": "test async end function","author": "Qore Technologies, sro","body": "sub async_test_f1_end($data) {\n    #if ($data.status == \"ERROR\")\n\t#serror(\"ASYNC-RECEIVE-ERROR\");\n    log(LL_INFO, \"data=%n\", $data);\n}\n","created": "2015-01-13 11:04:47.797875 +01:00","modified": "2015-01-13 11:04:47.797875 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "508","host": "panda.local","user": "<shell-unknown>"}]},{"name": "test_function_2","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 8,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_function_2","functions": [{"type": "primary","name": "test_function_2","version": "1.0","function_instanceid": 8,"function_type": "STEP","description": "test function 2","author": "Qore Technologies, sro","body": "sub test_function_2() {\n    setCustomStatus(\"B\");\n    doTest();\n}\n","created": "2015-01-13 11:04:47.724749 +01:00","modified": "2015-01-13 11:04:47.724749 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "106","host": "panda.local","user": "<shell-unknown>"}]},{"name": "array_subworkflow","version": "2.0","author": "Qore Technologies, sro","steptype": "SUBWORKFLOW","stepfunction_instanceid": 12,"arrayfunction_instanceid": 4,"arraytype": "SERIES","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "array_subworkflow","afname": "array_test_array","functions": [{"type": "primary","name": "array_subworkflow","version": "2.0","function_instanceid": 12,"function_type": "SUBWORKFLOW","description": "subworkflow array test function","author": "Qore Technologies, sro","body": "sub array_subworkflow($element) {\n    log(LL_INFO, \"element = %n\", $element);\n    \n    # if \"fast-exec\" is set, or a 10% chance of skipping the subworkflow\n    if (getOption(\"fast-exec\") || getOption(\"skip-subworkflow\") || !(rand() % 10)) {\n\tskipSubWorkflow();\n\treturn;\n    }\n    \n    # 20% chance of an error\n    if (!getOption(\"no-errors\") && !(rand() % 5)) {\n\tserror(\"TEST-ERROR\");\n\treturn;\n    }\n\n    my $h.name = \"SIMPLETEST\";\n    $h.version = \"1.0\";\n    \n    # create workflow data\n    my $key = sprintf(\"%s-%d-%d\", getStepInfo().name, \n\t\t      getWorkflowInstanceData(\"workflow_instanceid\"), \n\t\t      getStepInfo().index);\n\t\n    my $data.external_order_instanceid = $key;\n    $data.staticdata.data = $element;\n\n    bindSubWorkflow($h, $data);\n}\n","created": "2015-01-13 11:04:47.740206 +01:00","modified": "2015-01-13 11:04:47.740206 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "161","host": "panda.local","user": "<shell-unknown>"},{"type": "array","name": "array_test_array","version": "1.0","function_instanceid": 4,"function_type": "ARRAY","description": "array function test","author": "Qore Technologies, sro","body": "sub array_test_array() {\n    if (getOption(\"fast-exec\"))\n\treturn True;\n\n    # 1 out of 10 times throw an error\n    if (!getOption(\"no-errors\")) {\n\tif (!(rand() % 10))\n\t    serror(\"TEST-ERROR\");\n\n\t# another chance: 1/10 return NOTHING\n\tif (!(rand() % 10))\n\t    return;\n    }\n\n    # otherwise get array from stepname\n    my $key = getStepInfo().name;\n    my $array = getDynamicData($key);\n    \n    if (!exists $array) {\n\tmy $r = (rand() % 10);\n\n\tfor (my $i; $i < $r; $i++)\n\t    $array[$i] = ( \"key1\" : rand() % 20,\n\t\t\t   \"key2\" : \"this is key2\",\n\t\t\t   \"index\" : $i );\n\tmy $h.$key = $array;\n\tupdateDynamicData($h);\n    }\n    return $array;\n}\n","created": "2015-01-13 11:04:47.711722 +01:00","modified": "2015-01-13 11:04:47.711722 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "35","host": "panda.local","user": "<shell-unknown>"}]},{"name": "test_step_2","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 8,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_function_2","functions": [{"type": "primary","name": "test_function_2","version": "1.0","function_instanceid": 8,"function_type": "STEP","description": "test function 2","author": "Qore Technologies, sro","body": "sub test_function_2() {\n    setCustomStatus(\"B\");\n    doTest();\n}\n","created": "2015-01-13 11:04:47.724749 +01:00","modified": "2015-01-13 11:04:47.724749 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "106","host": "panda.local","user": "<shell-unknown>"}]},{"name": "test_function_3","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 9,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_function_3","functions": [{"type": "primary","name": "test_function_3","version": "1.0","function_instanceid": 9,"function_type": "STEP","description": "test function 3","author": "Qore Technologies, sro","body": "sub test_function_3() {\n    setCustomStatus(\"C\");\n    doTest();\n}\n","created": "2015-01-13 11:04:47.727808 +01:00","modified": "2015-01-13 11:04:47.727808 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "116","host": "panda.local","user": "<shell-unknown>"}]},{"name": "test_subworkflow","version": "2.0","author": "Qore Technologies, sro","steptype": "SUBWORKFLOW","stepfunction_instanceid": 13,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_subworkflow","functions": [{"type": "primary","name": "test_subworkflow","version": "2.0","function_instanceid": 13,"function_type": "SUBWORKFLOW","description": "subworkflow test function","author": "Qore Technologies, sro","body": "sub test_subworkflow() {\n    # if \"fast-exec\" is set, or a 10% chance of skipping the subworkflow\n    if (getOption(\"fast-exec\") || getOption(\"skip-subworkflow\") || !(rand() % 10)) {\n\tskipSubWorkflow();\n\treturn;\n    }\n\n    # 20% chance of an error\n    if (!getOption(\"no-errors\") && !(rand() % 5)) {\n\tserror(\"TEST-ERROR\");\n\treturn;\n    }\n    \n    my $h.name = \"SIMPLETEST\";\n    $h.version = \"1.0\";\n\n    # create workflow data\n    my $key = sprintf(\"%s-%d\", getStepInfo().name, \n\t\t      getWorkflowInstanceData(\"workflow_instanceid\"));\n\n    my $data.external_order_instanceid = $key;\n    $data.staticdata = (\n        \"simpledata-key1\" : rand() % 20,\n        \"simpledata-key2\" : \"this is key2\",\n        \"a-random-number\" : rand(),\n        );\n\n    my $r = bindSubWorkflow($h, $data);\n\n    log(LL_INFO, \"subworkflow created, workflow_instance_id=%d\", $r.workflow_instanceid);\n}\n","created": "2015-01-13 11:04:47.745019 +01:00","modified": "2015-01-13 11:04:47.745019 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "195","host": "panda.local","user": "<shell-unknown>"}]},{"name": "test_step_3","version": "1.0","author": "Qore Technologies, sro","steptype": "NORMAL","stepfunction_instanceid": 7,"arraytype": "NONE","created": "2015-01-13 11:04:47.876104 +01:00","sfname": "test_function_1","functions": [{"type": "primary","name": "test_function_1","version": "1.0","function_instanceid": 7,"function_type": "STEP","description": "test function 1","author": "Qore Technologies, sro","body": "sub test_function_1() {\n    updateDynamicData((\"test1\":now_us()));\n    setCustomStatus(\"A\");    \n    doTest();\n}\n","created": "2015-01-13 11:04:47.721701 +01:00","modified": "2015-01-13 11:04:47.721701 +01:00","createdby": "omq","modifiedby": "omq","tags": {},"source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","offset": "95","host": "panda.local","user": "<shell-unknown>"}]}],"wffuncs": [{"type": "onetimeinit","name": "test_onetimeinitialization","version": "1.0","function_instanceid": 21,"function_type": "GENERIC","description": "test one time initialization function","author": "Qore Technologies, sro","created": "2015-01-13 11:04:47.780461 +01:00","modified": "2015-01-13 11:04:47.780461 +01:00","source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","line": "433","body": "sub test_onetimeinitialization() {\n    my string $wfn = getWorkflowMetadata().name;\n    log(LL_INFO, \"one time initialization executing for workflow %n\", $wfn);\n\n    if (!getOption(\"no-errors\") && !getOption(\"no-init-error\") && !(rand() % 30))\n\tserror(\"TEST-INIT-ERROR\");\n}\n\n","createdby": "omq","modifiedby": "omq","tags": {},"offset": "433","host": "panda.local","user": "<shell-unknown>"},{"type": "errorfunction","name": "test_errors","version": "2.0","function_instanceid": 19,"function_type": "GENERIC","description": "test error function, provides the definitions for errors thrown by the test workflows","author": "Qore Technologies, sro","created": "2015-01-13 11:04:47.767732 +01:00","modified": "2015-01-13 11:04:47.767732 +01:00","source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","line": "314","body": "sub test_errors() {\n    return \n\t( \"ASYNC-ERROR\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry ),\n\t  \"ASYNC-RECEIVE-ERROR\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry ),\n\t  \"TEST-BUSINESS-ERROR\" :\n\t  ( \"desc\"     : \"test business error\",\n\t    # if no severity is given, default=OMQ::ES_Major\n\t    # if no status is given, default=OMQ::StatError\n\t    \"business\" : True\n\t  ),\n\t  \"TEST-VALIDATION-ERROR\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry ),\n\t  \"TEST-INIT-ERROR\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry ),\n\t  \"TEST-ERROR\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry ),\n\t  \"TEST-EXCEPTION\" :\n\t  ( \"desc\"     : \"test error\",\n\t    \"severity\" : OMQ::ES_Major,\n\t    \"status\"   : OMQ::StatRetry )\n\t  );\n}\n","createdby": "omq","modifiedby": "omq","tags": {},"offset": "314","host": "panda.local","user": "<shell-unknown>"},{"type": "attachfunction","name": "test_init","version": "1.0","function_instanceid": 22,"function_type": "STEP","description": "test function","author": "Qore Technologies, sro","created": "2015-01-13 11:04:47.783724 +01:00","modified": "2015-01-13 11:04:47.783724 +01:00","source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","line": "447","body": "sub test_init() {\n    if (!(rand() % 4))\n\tdoTest();\n}\n","createdby": "omq","modifiedby": "omq","tags": {},"offset": "447","host": "panda.local","user": "<shell-unknown>"},{"type": "detachfunction","name": "array_detach_test","version": "1.0","function_instanceid": 3,"function_type": "GENERIC","description": "array test detach function test","author": "Qore Technologies, sro","created": "2015-01-13 11:04:47.706957 +01:00","modified": "2015-01-13 11:04:47.706957 +01:00","source": "/Users/pchalupny/workspace/qorus/trunk/test/TEST-WORKFLOWS/test-functions-v1.0.qfd","line": "26","body": "sub array_detach_test(string $stat) {\n    log(LL_INFO, \"array test detach function test, stat: %y\", $stat);\n}\n","createdby": "omq","modifiedby": "omq","tags": {},"offset": "26","host": "panda.local","user": "<shell-unknown>"}],"exec": [{"mode": "NORMAL","status": "waiting","iterations": 0,"totalSegments": 5,"starttime": "2016-04-01 13:23:24.627178 +02:00","logfile": "/Users/pchalupny/workspace/builds/qorus/log/OMQ-temnor-home-1-ARRAYTEST.log","options": {"verbose": 100,"max-retries": 5},"sync": false,"executionID": 1,"errors": 0,"warnings": 0,"alerts": [],"log_url": "ws://localhost:8001/log/workflows/1"},{"mode": "NORMAL","status": "waiting","iterations": 0,"totalSegments": 5,"starttime": "2016-04-01 13:23:24.636018 +02:00","logfile": "/Users/pchalupny/workspace/builds/qorus/log/OMQ-temnor-home-1-ARRAYTEST.log","options": {"verbose": 100,"max-retries": 5},"sync": false,"executionID": 2,"errors": 0,"warnings": 0,"alerts": [],"log_url": "ws://localhost:8001/log/workflows/1"},{"mode": "NORMAL","status": "waiting","iterations": 0,"totalSegments": 5,"starttime": "2016-04-01 13:23:24.642389 +02:00","logfile": "/Users/pchalupny/workspace/builds/qorus/log/OMQ-temnor-home-1-ARRAYTEST.log","options": {"verbose": 100,"max-retries": 5},"sync": false,"executionID": 3,"errors": 0,"warnings": 0,"alerts": [],"log_url": "ws://localhost:8001/log/workflows/1"}],"exec_count": 3,"connections": [],"groups": [{"name": "test","enabled": true,"size": 3},{"name": "ARRAYTEST","enabled": true,"size": 1}],"alerts": []}
