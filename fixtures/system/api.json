{
  "omq.system.help": {
    "params": "[command_name]",
    "category": "system",
    "description": "gives Qorus network API method information"
  },
  "omq.system.get-option-info": {
    "category": "system",
    "description": "gives information on available options"
  },
  "omq.system.get-status": {
    "category": "system",
    "description": "returns system status information"
  },
  "omq.system.set-option": {
    "params": "hash: option = value",
    "category": "system",
    "description": "sets Qorus system options"
  },
  "omq.system.flush-options": {
    "params": "optional hash: option = value or NOTHING",
    "category": "system",
    "description": "Write Qorus options into option file (specified by hash or running options)"
  },
  "omq.system.shutdown": {
    "category": "system",
    "description": "queues an immediate system shutdown; returns immediately"
  },
  "omq.system.shutdown-wait": {
    "category": "system",
    "description": "shuts down the Qorus system; returns when shutdown process is complete"
  },
  "omq.system.submit-data.[workflow].[version]": {
    "name": "^omq.system.submit-data..*",
    "params": "order data, order inital status",
    "category": "workflow",
    "description": "submits workflow order data"
  },
  "omq.system.create-order": {
    "params": "order data, order inital status",
    "category": "workflow",
    "description": "submits workflow order data"
  },
  "omq.system.get-workflow-info": {
    "params": "[execution id]",
    "category": "workflow",
    "description": "returns workflow information for the id passed, or for all workflows if no id is passed"
  },
  "omq.system.show-workflow-cache": {
    "category": "workflow",
    "description": "returns a list of all workflows cached"
  },
  "omq.system.start-workflow": {
    "alias": "omq.system.start",
    "params": "hash: keys: name (required), [version], [options]. [mode]",
    "category": "workflow",
    "description": "starts an instance of the workflow given (or more than one instance if the 'instances' key is given"
  },
  "omq.system.start-workflows": {
    "params": "hash: keys: name (required), instances (required), [version], [options]",
    "category": "workflow",
    "description": "starts one or more instance of the workflow given according to the value of the 'instances' key"
  },
  "omq.system.exec-synchronous-workflow": {
    "params": "hash: keys: name (required), version (required), options (optional), orderdata (required), dynamicdata (optional)",
    "category": "workflow",
    "description": "executes an instance of the workflow given in synchronous mode"
  },
  "omq.system.exec-synchronous-existing": {
    "params": "hash: keys: workflow_instanceid (required), options (optional)",
    "category": "workflow",
    "description": "start executing a synchronous workflow on the given workflow order data instance with 'Y' (READY) status"
  },
  "omq.system.stop-all-workflows": {
    "category": "workflow",
    "description": "stops all instances of all active workflows"
  },
  "omq.system.stop-workflow-instance": {
    "params": "integer: workflow exec id",
    "category": "workflow",
    "description": "stops the given workflow execution instance"
  },
  "omq.system.stop-workflow": {
    "alias": "omq.system.stop",
    "params": "list: 1:string:name, [2:string:version]",
    "category": "workflow",
    "description": "stops all instances of the workflow given"
  },
  "omq.system.set-workflow-option": {
    "params": "list: 1:integer:workflow exec id, 2:hash:option = value",
    "category": "workflow",
    "description": "sets the value of a particular option or options for a workflow"
  },
  "omq.system.get-workflow-option": {
    "params": "list: 1:integer:workflow exec id, 2:list or string:option names",
    "category": "workflow",
    "description": "gets the value of a particular option for a workflow"
  },
  "omq.system.get-workflow-options": {
    "params": "integer: workflow exec id",
    "category": "workflow",
    "description": "returns all options set for a workflow"
  },
  "omq.system.reset-workflow": {
    "params": "list: 1:string:name, 2:string:version",
    "category": "workflow",
    "description": "reloads a cached workflow definition from the Qorus database"
  },
  "omq.system.reset-all-workflows": {
    "params": "list: 1:string:name, 2:string:version",
    "category": "workflow",
    "description": "reloads all cached workflow definitions from the Qorus database"
  },
  "omq.system.replace-dynamic-data": {
    "params": "list: 1:string:workflow_instanceid, 2:hash:dynamic_data",
    "category": "workflow",
    "description": "replaces the dynamic data for a workflow with a new set of data"
  },
  "omq.system.replace-static-data": {
    "params": "list: 1:string:workflow_instanceid, 2:hash:static_data",
    "category": "workflow",
    "description": "replaces the static data for a workflow with a new set of data"
  },
  "omq.system.retry-workflow-instance": {
    "alias": "omq.system.retry",
    "params": "integer: workflow_instance_id",
    "category": "workflow",
    "description": "sets workflow_instance and all steps/segments with an ERROR status (segments must not be IN-PROGRESS or CANCELED) to RETRY"
  },
  "omq.system.retry-workflow-instances": {
    "params": "list of workflow_instance_ids",
    "category": "workflow",
    "description": "sets workflow_instance and all steps/segments with an ERROR status (segments must not be IN-PROGRESS or CANCELED) to RETRY"
  },
  "omq.system.cancel-workflow-instance": {
    "alias": "omq.system.cancel",
    "params": "integer: workflow_instance_id, boolean: True for cancel (default - used without argument), False for restore",
    "category": "workflow",
    "description": "sets a workflow instance with status ERROR, RETRY, ASYNC-WAITING, BLOCKED, WAITING, or EVENT-WAITING to CANCELED"
  },
  "omq.system.cancel-workflow-instances": {
    "params": "integer: workflow_instance_id, boolean: True for cancel (default - used without argument), False for restore",
    "category": "workflow",
    "description": "sets a workflow instance with status ERROR, RETRY, ASYNC-WAITING, BLOCKED, WAITING, or EVENT-WAITING to CANCELED"
  },
  "omq.system.reschedule-order": {
    "alias": "omq.system.reschedule",
    "params": "integer: workflow_instance_id, NOTHING or date for rescheduling",
    "category": "workflow",
    "description": "reschedules a workflow order with READY status to be processed at a later date"
  },
  "omq.system.reschedule-orders": {
    "params": "hash of workflow_instance_ids, value = NOTHING or date for rescheduling",
    "category": "workflow",
    "description": "reschedules a workflow order with READY status to be processed at a later date"
  },
  "omq.system.reprioritize-order": {
    "alias": "omq.system.reprioritize",
    "params": "int: workflow_instance_id, int: priority (0-999)",
    "category": "workflow",
    "description": "change the order priority a for an existing order"
  },
  "omq.system.reprioritize-orders": {
    "params": "hash of workflow_instance_ids, value = new priority (0 - 999)",
    "category": "workflow",
    "description": "updates the priority for multiple workflow orders"
  },
  "omq.system.block-workflow-instance": {
    "alias": "omq.system.block",
    "params": "integer: workflow_instance_id, boolean: True for block (default - used without argument), False for unblock",
    "category": "workflow",
    "description": "sets a workflow instance with status ERROR, RETRY, ASYNC-WAITING, CANCELED, WAITING, or EVENT-WAITING to BLOCKED"
  },
  "omq.system.block-workflow-instances": {
    "params": "hash: keys are workflow_instance_ids, values are block action: boolean: True for block, False for unblock",
    "category": "workflow",
    "description": "sets a workflow instance with status ERROR, RETRY, ASYNC-WAITING, CANCELED, WAITING, or EVENT-WAITING to BLOCKED"
  },
  "omq.system.set-workflow-instance-error": {
    "alias": "omq.system.set-error",
    "params": "integer: workflow_instance_id",
    "category": "workflow",
    "description": "sets a workflow instance with status RETRY, ASYNC-WAITING, or CANCELED to ERROR (+ all associated segments)"
  },
  "omq.system.set-workflow-instances-error": {
    "params": "integer: workflow_instance_id",
    "category": "workflow",
    "description": "sets a workflow instance with status RETRY, ASYNC-WAITING, or CANCELED to ERROR (+ all associated segments)"
  },
  "omq.system.skip-step": {
    "params": "integer: workflow_instance_id, integer: stepid, integer: ind",
    "category": "workflow",
    "description": "skips execution of a step and marks it automatically as COMPLETE; executes an immediate workflow instance retry with non-async steps"
  },
  "omq.system.skip-step-without-retry": {
    "params": "integer: workflow_instance_id, integer: stepid, integer: ind",
    "category": "workflow",
    "description": "skips execution of a step and marks it automatically as COMPLETE; does not execute an immediate workflow instance retry with non-async steps"
  },
  "omq.system.set-order-info": {
    "params": "workflow_instanceid and a hash with info values",
    "category": "obsolete",
    "description": "Set the addional information for order instance (workflow instance); 1st arg must be a workflow instance id, 2nd hash with keys op_username and/or op_comment.  Data for the given key is cleared when the key is present but the value is missing (NOTHING) or NULL"
  },
  "omq.system.get-order-info": {
    "params": "Workflow instance id",
    "category": "obsolete",
    "description": "Returns a hash with order_instance additional information"
  },
  "omq.system.set-order-note": {
    "params": "workflow_instanceid and a string with note",
    "category": "workflow",
    "description": "Set the addional information for order instance (workflow instance); 1st arg must be a workflow instance id, 2nd is a string with comment/note"
  },
  "omq.system.order-notes": {
    "params": "Workflow instance id; optional count of notes",
    "category": "workflow",
    "description": "Returns a list of notes hash."
  },
  "omq.system.post-event": {
    "params": "event type name, event key",
    "category": "workflow",
    "description": "posts a workflow synchronization event"
  },
  "omq.system.runtime-properties": {
    "params": "no params",
    "category": "system",
    "description": "returns a hash with runtime properties specified with -D on the startup (different from the system.prop service)"
  },
  "omq.system.list-all-services": {
    "params": "optional: datetime (returns services if list changed since date passed)",
    "category": "service access and control",
    "description": "returns a list of all cached system and user services"
  },
  "omq.system.list-services": {
    "category": "service access and control",
    "description": "returns a list of all cached system services"
  },
  "omq.system.reset-all-services": {
    "category": "service access and control",
    "description": "unloads and reloads all user services from the database"
  },
  "omq.system.reset-services": {
    "category": "service access and control",
    "description": "unloads and reloads all system services from the database"
  },
  "omq.system.reset-service": {
    "category": "service access and control",
    "description": "unloads and reloads a single system service from the database"
  },
  "omq.system.service.[servicename].[method]": {
    "name": "^omq.system.service..*",
    "params": "depends on service",
    "description": "calls a system service"
  },
  "omq.system.delete-service": {
    "params": "list: 1:string:name [2:string:version]",
    "category": "service access and control",
    "description": "deletes a system service so it will be reloaded on next access"
  },
  "omq.system.set-service-autostart": {
    "params": "list: 1:string:name 2:boolean:status",
    "category": "service access and control",
    "description": "sets the autostart status on a system service"
  },
  "omq.system.get-service-autostart": {
    "text": "omq.system.get-service-autostart",
    "params": "string:name",
    "category": "service access and control",
    "description": "retrieves the autostart status for a system service"
  },
  "omq.system.set-service-options": {
    "params": "list: string:service name, 2:hash:option = value",
    "category": "service",
    "description": "sets the value of a particular option or options for a service"
  },
  "omq.system.get-service-options": {
    "params": "list: string: service name, 2:list or string:option names",
    "category": "service",
    "description": "gets the value of a particular option for a service"
  },
  "omq.user.list-services": {
    "text": "omq.user.list-services",
    "category": "service access and control",
    "description": "returns a list of all cached user services"
  },
  "omq.user.reset-services": {
    "category": "service access and control",
    "description": "unloads and reloads all user services from the database"
  },
  "omq.user.reset-service": {
    "category": "service access and control",
    "description": "unloads and reloads a single user service from the database"
  },
  "omq.user.service.[servicename].[method]": {
    "name": "^omq.user.service..*",
    "params": "depends on service",
    "description": "calls a user service"
  },
  "omq.user.delete-service": {
    "params": "list: 1:string:name [2:string:version]",
    "category": "service access and control",
    "description": "deletes a user service so it will be reloaded on next access"
  },
  "omq.user.set-service-autostart": {
    "params": "list: 1:string:name 2:boolean:status",
    "category": "service access and control",
    "description": "sets the autostart status on a user service"
  },
  "omq.user.get-service-autostart": {
    "text": "omq.user.get-service-autostart",
    "params": "string:name",
    "category": "service access and control",
    "description": "retrieves the autostart status for a user service"
  },
  "omq.user.set-service-options": {
    "params": "list: string:service name, 2:hash:option = value",
    "category": "service",
    "description": "sets the value of a particular option or options for a service"
  },
  "omq.user.get-service-options": {
    "params": "list: string: service name, 2:list or string:option names",
    "category": "service",
    "description": "gets the value of a particular option for a service"
  },
  "omq.system.reload-rbac": {
    "text": "omq.system.reload-rbac",
    "category": "role based access control",
    "description": "reloads RBAC information from the database"
  },
  "omq.system.add-user": {
    "params": "username, password, descriptive_name, role(s)",
    "category": "role based access control",
    "maskargs": 1,
    "description": "creates a new RBAC user"
  },
  "omq.system.update-user": {
    "params": "username, hash=(valid keys: 'pass', 'name', 'roles')",
    "category": "role based access control",
    "description": "updates an existing RBAC user, replaces values"
  },
  "omq.system.passwd": {
    "params": "string: oldpwd, string: newpwd",
    "category": "role based access control",
    "maskargs": [
      0,
      1
    ],
    "description": "updates the password for the current user"
  },
  "omq.system.delete-user": {
    "params": "username",
    "category": "role based access control",
    "description": "deletes an existing RBAC user"
  },
  "omq.system.add-role": {
    "params": "role_name, description, permissions, groups",
    "category": "role based access control",
    "description": "creates a new RBAC role"
  },
  "omq.system.clone-role": {
    "params": "source_role, new_role, description",
    "category": "role based access control",
    "description": "creates a new RBAC role based on an existing role"
  },
  "omq.system.update-role": {
    "params": "role, hash=(valid keys: 'desc', 'permissions', 'groups')",
    "category": "role based access control",
    "description": "updates an existing RBAC role, replaces all current values with new values"
  },
  "omq.system.delete-role": {
    "params": "role_name",
    "category": "role based access control",
    "description": "deletes an existing RBAC role"
  },
  "omq.system.add-permission": {
    "params": "permission_name, description",
    "category": "role based access control",
    "description": "creates a new RBAC user permission"
  },
  "omq.system.update-permission": {
    "params": "permission_name, description",
    "category": "role based access control",
    "description": "updates the description for an existing user RBAC permission"
  },
  "omq.system.delete-permission": {
    "params": "permission_name",
    "category": "role based access control",
    "description": "deletes an existing RBAC user permission"
  },
  "omq.system.get-all-users": {
    "category": "role based access control",
    "description": "returns a hash of all existing RBAC users"
  },
  "omq.system.get-all-roles": {
    "category": "role based access control",
    "description": "returns a hash of all existing RBAC roles"
  },
  "omq.system.get-all-permissions": {
    "category": "role based access control",
    "description": "returns a list of all existing RBAC permissions"
  },
  "omq.system.update-current-user": {
    "params": "hash, valid keys: 'pass', 'name', 'roles', 'storage'",
    "category": "role based access control",
    "description": "updates the current RBAC user, new values replace old values, 'roles' can only be updated if the caller has the USER-CONTROL or MODIFY-USER permission"
  },
  "omq.system.get-current-user-info": {
    "category": "role based access control",
    "description": "returns information about the current user"
  },
  "omq.system.get-user-info": {
    "params": "username",
    "category": "role based access control",
    "description": "returns information about the given user"
  },
  "omq.system.get-role-info": {
    "params": "username",
    "category": "role based access control",
    "description": "returns information about the given role"
  },
  "omq.system.rotate-log-files": {
    "category": "system",
    "description": "rotates all log files"
  },
  "omq.system.ping": {
    "category": "system",
    "description": "response shows that the instance is alive"
  },
  "omq.system.authenticate": {
    "category": "obsolete",
    "description": "returns a constant 'admin': do not use; OBSOLETE"
  },
  "omq.system.wait-for-events": {
    "params": "last event number, [timeout in ms]",
    "category": "event",
    "description": "waits for events"
  },
  "omq.system.wait-for-events-or": {
    "params": "last event number, list of OR criteria hashes, [timeout in ms], [list of AND NOT criteria hashes], [AND NOT...]",
    "category": "event",
    "description": "waits for events and returns all events matching at least one of the criteria passed, if any AND NOT lists of criteria hashes are passed, will filter out any events matching all of the criteria in any of the AND NOT list elements"
  },
  "omq.system.wait-for-events-and": {
    "params": "last event number, list of AND criteria hashes, [timeout in ms], [list of OR NOT criteria hashes]",
    "category": "event",
    "description": "waits for events and returns all events matching all of the criteria passed, if the OR NOT list of criteria hashes is passed, will also include any events not matching any of the criteria in that list"
  },
  "omq.system.get-last-event-id": {
    "category": "event",
    "description": "returns the last event ID"
  },
  "omq.system.get-last-events": {
    "params": "maximum number of events",
    "category": "event",
    "description": "returns a list of the last events"
  },
  "omq.system.get-last-events-or": {
    "params": "maximum number of events, list of criteria hashes, [list of AND NOT criteria hashes], [AND NOT...]",
    "category": "event",
    "description": "returns a list of the last events meeting any of the criteria passed, if any AND NOT lists of criteria hashes are passed, will filter out any events matching all of the criteria in any of the AND NOT list elements"
  },
  "omq.system.get-last-events-and": {
    "params": "maximum number of events, list of criteria hashes, [list of OR NOT criteria hashes]",
    "category": "event",
    "description": "returns a list of the last events meeting all of the criteria passed, if the OR NOT list of criteria hashes is passed, will also include any events not matching any of the criteria in that list"
  },
  "omq.system.get-listeners": {
    "category": "system",
    "description": "returns a list of listener hashes with the following keys: id, bind, proto"
  },
  "omq.system.stop-listener": {
    "params": "string|int: bind address",
    "category": "system",
    "description": "stops a listener based on its bind address"
  },
  "omq.system.stop-listener-id": {
    "params": "int: listener ID",
    "category": "system",
    "description": "stops a listener based on its listener ID"
  },
  "omq.system.start-listeners": {
    "params": "string: bind address, [string: X.509 certificate file, [string: certificate's private key file]]",
    "category": "system",
    "description": "starts one or more HTTP listeners"
  },
  "omq.system.group.set-status": {
    "params": "string: group name, bool: enabled",
    "category": "system",
    "description": "enables or disables a workflow/service/job group"
  },
  "omq.system.group.create": {
    "params": "string: group name, string: description, [list: serviceids, [list: workflowids, [bool: enabled = True, [list: jobids, [list: mapperids, [list: vmapids]]]]]]",
    "category": "system",
    "description": "creates a new interface group"
  },
  "omq.system.group.update": {
    "params": "group name, hash=(valid keys: 'workflows', 'services', 'jobs', 'mappers', 'vmaps', 'desc', 'enabled')",
    "category": "role based access control",
    "description": "updates an existing interface group, replaces or edits values"
  },
  "omq.system.group.delete": {
    "params": "string: group name",
    "category": "system",
    "description": "deletes a workflow/service/job group"
  },
  "omq.system.group.add-workflow": {
    "params": "string: group name, string: workflow name, [string: version]",
    "category": "system",
    "description": "adds a single workflow or all current versions of a workflow (in case the version parameter is not sent) to a workflow/service/job group"
  },
  "omq.system.group.add-service": {
    "params": "string: group name, string: service name, [string: version]",
    "category": "system",
    "description": "adds a particular user service and version or all current versions of a user service (in case the version parameter is not sent) to a workflow/service/job group"
  },
  "omq.system.group.add-job": {
    "params": "string: group name, string: job name",
    "category": "system",
    "description": "adds a particular job to a workflow/service/job group"
  },
  "omq.system.group.add-workflow-id": {
    "params": "string: group name, int: workflowid",
    "category": "system",
    "description": "adds a workflow to a workflow/service/job group"
  },
  "omq.system.group.add-service-id": {
    "params": "string: group name, int: serviceid",
    "category": "system",
    "description": "adds a user service to a workflow/service/job group"
  },
  "omq.system.group.add-job-id": {
    "params": "string: group name, int: jobid",
    "category": "system",
    "description": "adds a user job to a workflow/service/job group"
  },
  "omq.system.group.delete-workflow": {
    "params": "string: group name, string: workflow name, [string: version]",
    "category": "system",
    "description": "deletes a single workflow or all current versions of a workflow (in case the version parameter is not sent) from a workflow/service/job group"
  },
  "omq.system.group.delete-service": {
    "params": "string: group name, string: service name, [string: version]",
    "category": "system",
    "description": "deletes a user service or all current versions of a service (in case the version parameter is not sent) from a workflow/service/job group"
  },
  "omq.system.group.delete-job": {
    "params": "string: group name, string: job name",
    "category": "system",
    "description": "deletes a single job from an interface group"
  },
  "omq.system.group.delete-workflow-id": {
    "params": "string: group name, int: workflowid",
    "category": "system",
    "description": "deletes a workflow from a workflow/service/job group"
  },
  "omq.system.group.delete-service-id": {
    "params": "string: group name, int: serviceid",
    "category": "system",
    "description": "deletes a user service from a workflow/service/job group"
  },
  "omq.system.group.delete-job-id": {
    "params": "string: group name, int: jobid",
    "category": "system",
    "description": "deletes a job from an interface group"
  },
  "omq.system.group.info": {
    "params": "[string: group name]",
    "category": "system",
    "description": "returns all information about a single group or all groups if no argument is passed"
  },
  "omq.system.job.info": {
    "params": "[string: job name]",
    "category": "job",
    "description": "returns all information about a single job or all jobs if no argument is passed"
  },
  "omq.system.job.info-id": {
    "params": "int: jobid",
    "category": "job",
    "description": "returns all information about the jobid given (must be active)"
  },
  "omq.system.job.list-active": {
    "category": "job",
    "description": "returns all information about all active jobs visible to the calling user"
  },
  "omq.system.job.run": {
    "params": "string: job name",
    "category": "job",
    "description": "returns a hash giving the result of running the job"
  },
  "omq.system.job.run-id": {
    "params": "int: jobid",
    "category": "job",
    "description": "returns a hash giving the result of running the job"
  },
  "omq.system.job.set-active": {
    "params": "string: job name, bool: active status",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.set-active-id": {
    "params": "int: jobid, bool: active status",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.set-expiry": {
    "params": "string: job name, [date: expiration date]",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.set-expiry-id": {
    "params": "int: jobid, [date: expiration date]",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.schedule": {
    "params": "string: job name, *string: cron schedule, *string: duration in seconds",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.schedule-id": {
    "params": "int: jobid, *string: cron schedule, *string: duration in seconds",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.reset": {
    "params": "string: job name",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.reset-id": {
    "params": "int: jobid",
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.reset-all": {
    "category": "job",
    "description": "returns a string giving the result of the operation"
  },
  "omq.system.job.set-options": {
    "params": "list: string:job name, 2:hash:option = value",
    "category": "job",
    "description": "sets the value of a particular option or options for an active job"
  },
  "omq.system.job.get-options": {
    "params": "list: string: job name, 2:list or string:option names",
    "category": "job",
    "description": "gets the value of a particular option for a job"
  },
  "omq.system.job.set-options-id": {
    "params": "list: int:job id, 2:hash:option = value",
    "category": "job",
    "description": "sets the value of a particular option or options for an active job"
  },
  "omq.system.job.get-options-id": {
    "params": "list: int:job id, 2:list or string:option names",
    "category": "job",
    "description": "gets the value of a particular option for a job"
  },
  "omq.system.schema.refresh-snapshots": {
    "category": "system",
    "description": "refreshes system schema's helper snapshots. Use with extreme care. See documentation for more info"
  },
  "omq.system.get-global-errors": {
    "category": "workflow",
    "description": "returns global error definitions"
  },
  "omq.system.get-workflow-errors": {
    "category": "workflow",
    "description": "returns error definitions for the given workflow"
  },
  "omq.system.get-all-errors": {
    "category": "workflow",
    "description": "returns all error definitions"
  },
  "omq.system.search-errors": {
    "category": "workflow",
    "description": "searches for all error definitions at all levels for the given error(s)"
  },
  "omq.system.update-global-error": {
    "params": "hash:(error, description, severity, retry_flag, business_flag, retry_delay_secs)",
    "category": "workflow",
    "description": "updates or creates a global error definition"
  },
  "omq.system.update-workflow-error": {
    "params": "int:wfid, hash:(error, description, severity, retry_flag, business_flag, retry_delay_secs)",
    "category": "workflow",
    "description": "creates a global or creates or updates a workflow-specific error definition"
  },
  "omq.system.delete-workflow-error": {
    "params": "int: wfid, string: err",
    "category": "workflow",
    "description": "deletes a workflow-specific error definition"
  },
  "omq.system.delete-error": {
    "params": "string: err",
    "category": "workflow",
    "description": "deletes a workflow-specific error definition"
  },
  "omq.system.reload-errors": {
    "category": "workflow",
    "description": "reloads all error definitions from the DB"
  },
  "omq.system.debug.echo": {
    "category": "debug",
    "description": "echos any arguments passed"
  },
  "omq.system.debug.get-thread-stacks": {
    "category": "debug",
    "description": "returns the current execution location of all threads"
  },
  "omq.system.debug.get-data-cache": {
    "category": "debug",
    "description": "returns a dump of the internal timed data cache"
  },
  "omq.system.debug.get-data-cache-summary": {
    "category": "debug",
    "description": "returns a summary of the internal timed data cache"
  },
  "omq.system.debug.get-segment-cache": {
    "category": "debug",
    "description": "returns a dump of the internal segment event cache"
  },
  "omq.system.debug.get-segment-summary": {
    "category": "debug",
    "description": "returns a summary of the internal segment event cache"
  },
  "omq.system.debug.get-workflow-queue-status": {
    "category": "debug",
    "description": "returns a summary of the internal workflow queue thread pool processing status"
  },
  "omq.system.debug.dump-caches": {
    "category": "debug",
    "description": "returns the contents of the SegmentManager caches"
  },
  "omq.system.debug.dump-system-pool": {
    "category": "debug",
    "description": "returns a description of the DatasourcePool for the system schema"
  },
  "omq.system.debug.dump-exec-cache": {
    "category": "debug",
    "description": "returns the internal workflow execution instance cache"
  },
  "omq.system.debug.get-workflow-entry": {
    "category": "debug",
    "description": "returns a string describing an internally cached workflow entry"
  },
  "omq.system.debug.workflow-entry": {
    "params": "int: workflow_instanceid, [bool: flag]",
    "category": "debug",
    "description": "sets the debug flag on a cached workflow entry for debugging purposes"
  },
  "omq.system.debug.system": {
    "params": "bool: flag",
    "category": "debug",
    "description": "set system debugging flag on or off"
  }
}
